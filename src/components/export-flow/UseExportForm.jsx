import React from "react";
import { Input, DatePicker } from "antd";
import moment from "moment";
import PropTypes from "prop-types";

const UseExportForm = ({
  formData,
  setFormData,
  openDepartmentModal,
  timeError,
  setTimeError,
  mandatoryError,
  setMandatoryError,
}) => {
  // Ki·ªÉm tra gi·ªù nh·∫≠n
  const checkTimeValid = (dateString, timeString) => {
    if (!dateString || !timeString) {
      setTimeError("");
      return;
    }
    const selected = moment(
      `${dateString} ${timeString}`,
      "YYYY-MM-DD HH:mm:ss"
    );
    const now = moment();
    const diff = selected.diff(now, "hours", true);
    if (diff < 6) {
      setTimeError(
        "Th·ªùi gian nh·∫≠n ph·∫£i l·ªõn h∆°n th·ªùi ƒëi·ªÉm hi·ªán t·∫°i √≠t nh·∫•t 6 gi·ªù"
      );
    } else {
      setTimeError("");
    }
  };

  // Ch·∫∑n nh·∫≠p qu√° 150 k√Ω t·ª±
  const handleReasonChange = (e) => {
    const value = e.target.value;
    if (value.length <= 150) {
      setFormData({ ...formData, exportReason: value });
      setMandatoryError(""); // clear l·ªói khi b·∫Øt ƒë·∫ßu nh·∫≠p
    }
  };

  return (
    <>
      {/* Ng√†y nh·∫≠n v√† Th·ªùi gian nh·∫≠n */}
      <span className="font-semibold">Lo·∫°i xu·∫•t: S·∫£n Xu·∫•t</span>
      <div className="mb-2"></div>
      <div className="flex gap-4 mb-4">
        <div className="flex-1">
          <label className="block mb-1">
            Ng√†y nh·∫≠n <span className="text-red-500">*</span>
          </label>
          <DatePicker
            format="DD-MM-YYYY" // v·∫´n gi·ªØ ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y ƒë·ªãnh d·∫°ng n√†y
            onChange={(date) => {
              const newDate = date?.isValid()
                ? date.format("YYYY-MM-DD")
                : null; // üëà ƒë·ªïi ch·ªó n√†y
              setFormData({ ...formData, exportDate: newDate });
              setMandatoryError("");
              if (newDate && formData.exportTime) {
                checkTimeValid(newDate, formData.exportTime);
              }
            }}
            className="w-full"
            allowClear
            placeholder="Ch·ªçn ng√†y nh·∫≠n"
          />
          {!formData.exportDate && (
            <div className="text-red-500 text-xs mt-1">
              Vui l√≤ng ch·ªçn ng√†y nh·∫≠n.
            </div>
          )}
        </div>
        <div className="flex-1">
          <label className="block mb-1">
            Th·ªùi gian nh·∫≠n <span className="text-red-500">*</span>
          </label>
          <DatePicker
            picker="time"
            format="HH:mm"
            value={
              formData.exportTime ? moment(formData.exportTime, "HH:mm") : null
            }
            onChange={(time, timeString) => {
              setFormData({ ...formData, exportTime: timeString || null });
              setMandatoryError("");
              checkTimeValid(formData.exportDate, timeString);
            }}
            className="w-full"
            allowClear
            placeholder="Ch·ªçn th·ªùi gian nh·∫≠n"
          />
          {!formData.exportTime && (
            <div className="text-red-500 text-xs mt-1">
              Vui l√≤ng ch·ªçn th·ªùi gian nh·∫≠n.
            </div>
          )}
          {timeError && (
            <div className="text-red-500 text-xs mt-1">{timeError}</div>
          )}
        </div>
      </div>

      {/* L√Ω do xu·∫•t */}
      <div className="mb-4">
        <label className="block mb-1">
          L√Ω do xu·∫•t <span className="text-red-500">*</span>
        </label>
        <Input.TextArea
          value={formData.exportReason || ""}
          placeholder="Nh·∫≠p l√Ω do xu·∫•t"
          maxLength={150}
          rows={2}
          onChange={handleReasonChange}
          className="w-full"
          showCount
        />
        {!formData.exportReason && (
          <div className="text-red-500 text-xs mt-1">
            Vui l√≤ng nh·∫≠p l√Ω do xu·∫•t.
          </div>
        )}
      </div>

      {/* Ph√≤ng ban: onClick m·ªü modal */}
      <div className="mb-4">
        <label className="block mb-1">
          Ph√≤ng ban <span className="text-red-500">*</span>
        </label>
        <Input
          value={
            formData.receivingDepartment
              ? formData.receivingDepartment.name
              : ""
          }
          placeholder="Ch·ªçn ph√≤ng ban"
          readOnly
          onClick={openDepartmentModal}
          className="w-full cursor-pointer"
        />
        {!formData.receivingDepartment && (
          <div className="text-red-500 text-xs mt-1">
            Vui l√≤ng ch·ªçn ph√≤ng ban.
          </div>
        )}
      </div>

      {/* Ng∆∞·ªùi ƒë·∫°i di·ªán ph√≤ng ban */}
      <div className="mb-4">
        <label className="block mb-1">Ng∆∞·ªùi ƒë·∫°i di·ªán ph√≤ng ban</label>
        <Input
          value={formData.departmentRepresentative || ""}
          placeholder="T·ª± ƒë·ªông ƒëi·ªÅn sau khi ch·ªçn ph√≤ng ban"
          readOnly
          className="w-full"
          style={{
            backgroundColor: "#cfcfcf",
            cursor: "not-allowed",
          }}
        />
      </div>

      {/* S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi ƒë·∫°i di·ªán */}
      <div className="mb-4">
        <label className="block mb-1">S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi ƒë·∫°i di·ªán</label>
        <Input
          value={formData.departmentRepresentativePhone || ""}
          placeholder="T·ª± ƒë·ªông ƒëi·ªÅn sau khi ch·ªçn ph√≤ng ban"
          readOnly
          className="w-full"
          style={{
            backgroundColor: "#cfcfcf",
            cursor: "not-allowed",
          }}
        />
      </div>
    </>
  );
};

UseExportForm.propTypes = {
  formData: PropTypes.shape({
    exportReason: PropTypes.string,
    exportDate: PropTypes.string,
    exportTime: PropTypes.string,
    receivingDepartment: PropTypes.object,
    departmentRepresentative: PropTypes.string,
    departmentRepresentativePhone: PropTypes.string,
    note: PropTypes.string,
    type: PropTypes.string,
  }).isRequired,
  setFormData: PropTypes.func.isRequired,
  openDepartmentModal: PropTypes.func.isRequired,
  timeError: PropTypes.string,
  setTimeError: PropTypes.func,
  mandatoryError: PropTypes.string,
  setMandatoryError: PropTypes.func,
};

export default UseExportForm;
